/* tslint:disable */
/* eslint-disable */
/**
 * xapi services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  SendSMS,
  SendSMSResult,
} from '../models';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    SendSMSFromJSON,
    SendSMSToJSON,
    SendSMSResultFromJSON,
    SendSMSResultToJSON,
} from '../models';

export interface SendSMSRequest {
    sendSMS?: SendSMS;
}

/**
 * 
 */
export class SmsApi extends runtime.BaseAPI {

    /**
     * 发送短信
     * 发送短信
     */
    async sendSMSRaw(requestParameters: SendSMSRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendSMSResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Client-ID"] = this.configuration.apiKey("X-Client-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["sms:send"]);
        }

        const response = await this.request({
            path: `/sms/v1/send`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendSMSToJSON(requestParameters.sendSMS),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendSMSResultFromJSON(jsonValue));
    }

    /**
     * 发送短信
     * 发送短信
     */
    async sendSMS(requestParameters: SendSMSRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendSMSResult> {
        const response = await this.sendSMSRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
