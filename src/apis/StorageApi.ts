/* tslint:disable */
/* eslint-disable */
/**
 * xapi services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  StorageProvider,
  StorageTemporaryCredentials,
} from '../models';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    StorageProviderFromJSON,
    StorageProviderToJSON,
    StorageTemporaryCredentialsFromJSON,
    StorageTemporaryCredentialsToJSON,
} from '../models';

export interface GetStorageTemporaryCredentialsRequest {
    provider?: StorageProvider;
    path?: string;
}

/**
 * 
 */
export class StorageApi extends runtime.BaseAPI {

    /**
     * 获取上传文件临时凭证
     * 获取上传文件临时凭证
     */
    async getStorageTemporaryCredentialsRaw(requestParameters: GetStorageTemporaryCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageTemporaryCredentials>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["storage.credentials:read"]);
        }

        const response = await this.request({
            path: `/storage/v1/temporary_credentials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageTemporaryCredentialsFromJSON(jsonValue));
    }

    /**
     * 获取上传文件临时凭证
     * 获取上传文件临时凭证
     */
    async getStorageTemporaryCredentials(requestParameters: GetStorageTemporaryCredentialsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageTemporaryCredentials> {
        const response = await this.getStorageTemporaryCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
