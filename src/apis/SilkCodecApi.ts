/* tslint:disable */
/* eslint-disable */
/**
 * xapi services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface DecodeSilkV3Request {
    format?: string;
    file?: Blob;
}

export interface DecodeSilkV3ByURLRequest {
    url: string;
    format?: string;
}

export interface EncodeSilkV3Request {
    file?: Blob;
}

export interface EncodeSilkV3ByURLRequest {
    url: string;
}

/**
 * 
 */
export class SilkCodecApi extends runtime.BaseAPI {

    /**
     * 解码silk-v3格式的语音
     * 解码silk-v3格式的语音
     */
    async decodeSilkV3Raw(requestParameters: DecodeSilkV3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/silk/v3/decode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 解码silk-v3格式的语音
     * 解码silk-v3格式的语音
     */
    async decodeSilkV3(requestParameters: DecodeSilkV3Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.decodeSilkV3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 将链接解码silk-v3格式的语音
     * 将链接解码silk-v3格式的语音
     */
    async decodeSilkV3ByURLRaw(requestParameters: DecodeSilkV3ByURLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling decodeSilkV3ByURL.');
        }

        const queryParameters: any = {};

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/silk/v3/decode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 将链接解码silk-v3格式的语音
     * 将链接解码silk-v3格式的语音
     */
    async decodeSilkV3ByURL(requestParameters: DecodeSilkV3ByURLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.decodeSilkV3ByURLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 将语音编码为silk-v3格式
     * 将语音编码为silk-v3格式
     */
    async encodeSilkV3Raw(requestParameters: EncodeSilkV3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/silk/v3/encode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 将语音编码为silk-v3格式
     * 将语音编码为silk-v3格式
     */
    async encodeSilkV3(requestParameters: EncodeSilkV3Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.encodeSilkV3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 将语音链接编码为silk-v3格式
     * 将语音链接编码为silk-v3格式
     */
    async encodeSilkV3ByURLRaw(requestParameters: EncodeSilkV3ByURLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling encodeSilkV3ByURL.');
        }

        const queryParameters: any = {};

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/silk/v3/encode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 将语音链接编码为silk-v3格式
     * 将语音链接编码为silk-v3格式
     */
    async encodeSilkV3ByURL(requestParameters: EncodeSilkV3ByURLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.encodeSilkV3ByURLRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
