/* tslint:disable */
/* eslint-disable */
/**
 * xapi services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StorageProvider } from './StorageProvider';
import {
    StorageProviderFromJSON,
    StorageProviderFromJSONTyped,
    StorageProviderToJSON,
} from './StorageProvider';

/**
 * 
 * @export
 * @interface StorageTemporaryCredentials
 */
export interface StorageTemporaryCredentials {
    /**
     * 
     * @type {StorageProvider}
     * @memberof StorageTemporaryCredentials
     */
    provider: StorageProvider;
    /**
     * 存储桶
     * @type {string}
     * @memberof StorageTemporaryCredentials
     */
    bucket: string;
    /**
     * 地区
     * @type {string}
     * @memberof StorageTemporaryCredentials
     */
    region: string;
    /**
     * CDN地址
     * @type {string}
     * @memberof StorageTemporaryCredentials
     */
    cdn?: string;
    /**
     * 上传之后的文件地址
     * @type {string}
     * @memberof StorageTemporaryCredentials
     */
    url?: string;
    /**
     * 存储平台的临时上传凭证参数
     * @type {object}
     * @memberof StorageTemporaryCredentials
     */
    credentials: object;
}

/**
 * Check if a given object implements the StorageTemporaryCredentials interface.
 */
export function instanceOfStorageTemporaryCredentials(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "provider" in value;
    isInstance = isInstance && "bucket" in value;
    isInstance = isInstance && "region" in value;
    isInstance = isInstance && "credentials" in value;

    return isInstance;
}

export function StorageTemporaryCredentialsFromJSON(json: any): StorageTemporaryCredentials {
    return StorageTemporaryCredentialsFromJSONTyped(json, false);
}

export function StorageTemporaryCredentialsFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorageTemporaryCredentials {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'provider': StorageProviderFromJSON(json['provider']),
        'bucket': json['bucket'],
        'region': json['region'],
        'cdn': !exists(json, 'cdn') ? undefined : json['cdn'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'credentials': json['credentials'],
    };
}

export function StorageTemporaryCredentialsToJSON(value?: StorageTemporaryCredentials | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'provider': StorageProviderToJSON(value.provider),
        'bucket': value.bucket,
        'region': value.region,
        'cdn': value.cdn,
        'url': value.url,
        'credentials': value.credentials,
    };
}

